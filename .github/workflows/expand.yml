name: Expand Templates
run-name: ${{ github.workflow }} (${{ github.ref_name }})

on:
    push:
        branches:
            - main
            - test/**

        paths-ignore:
            - pages/**
            - dist/**

    pull_request:
        paths-ignore:
            - pages/**
            - dist/**

    workflow_dispatch:
        inputs:
            test-mode:
                description: "Test mode"
                required: true
                default: "normal"
                type: choice
                options:
                    - none
                    - normal
                    - strict

defaults:
    run:
        shell: bash

concurrency:
    group: |
        expand-${{
            startsWith(github.ref_name, 'test/') && github.ref_name ||
            format('test/{0}', github.head_ref || github.ref_name)
        }}

    cancel-in-progress: true

jobs:
    prepare-tools:
        name: Prepare Tools

        runs-on: ${{ vars.RUNNER_IMAGE }}

        outputs:
            cache-primary-key: ${{ steps.load-cached-binary.outputs.cache-primary-key }}

        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  ref: ${{ github.head_ref || github.ref_name }}

            - name: Load Cached Binary
              id: load-cached-binary
              uses: actions/cache/restore@v4
              with:
                  path: /opt/ac_tools/
                  key: >
                      tools-${{
                        hashFiles(
                          './.github/workflows/internal/tools.sh',
                          './.github/workflows/internal/tools/**/*.sh'
                        )
                      }}
                  restore-keys: tools

            - name: Build
              run: |
                  set -eu

                  mkdir -p /opt/ac_tools/bin/
                  mkdir -p /opt/ac_tools/lib/

                  sudo cp -rf /opt/ac_tools/** /usr/ || :

                  ./.github/workflows/internal/tools.sh

            - name: Cache Binary
              uses: actions/cache/save@v4
              if: (!cancelled()) && steps.load-cached-binary.outputs.cache-hit != 'true'
              with:
                  path: /opt/ac_tools/
                  key: ${{ steps.load-cached-binary.outputs.cache-primary-key }}

    config-matrix:
        name: Configure Matrix

        runs-on: ${{ vars.RUNNER_IMAGE }}

        outputs:
            libraries: ${{ steps.gen-lib-list.outputs.list }}
            excluded-libraries: ${{ steps.gen-lib-list.outputs.excluded }}

        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  ref: ${{ github.head_ref || github.ref_name }}

            - name: Generate Library List
              id: gen-lib-list
              run: |
                  set -eu

                  EXCLUDE='["abseil", "eigen", "gmp", "gcc", "clang"]'

                  {
                    echo -n "list="
                    {
                      echo -n "["
                      ls ./src/sub-installer/library/ | sed -e s/^/\"/g -e s/\.sh$/\"/g | tr '\n' ',' | sed s/,$//g
                      echo -n "]"
                    } | jq -c --argjson exclude "${EXCLUDE}" '. - $exclude'
                  } >>"${GITHUB_OUTPUT}"

                  echo "excluded=${EXCLUDE}" >>"${GITHUB_OUTPUT}"

    gen-installer:
        name: Generate Installers

        needs: prepare-tools

        runs-on: ${{ vars.RUNNER_IMAGE }}

        strategy:
            matrix:
                variant: ["gcc", "clang"]
            fail-fast: false

        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  ref: ${{ github.head_ref || github.ref_name }}
                  sparse-checkout-cone-mode: false
                  sparse-checkout: |
                      /*
                      !/dist/*

            - name: Load Cached Tools
              uses: actions/cache/restore@v4
              with:
                  path: /opt/ac_tools/
                  key: ${{ needs.prepare-tools.outputs.cache-primary-key }}
                  fail-on-cache-miss: true

            - name: Apply Tools
              run: sudo cp -rf /opt/ac_tools/** /usr/

            - name: Expand
              run: |
                  set -eu

                  sudo rm -rf ./dist/
                  mkdir -p ./dist/${{ matrix.variant }}/

                  echo "::group::GCC"
                  ./.github/workflows/internal/expanders/installer.sh ${{ matrix.variant }}
                  echo "::endgroup::"

            - name: Upload
              uses: actions/upload-artifact@v4
              with:
                  name: dist-${{ matrix.variant }}-installers
                  path: ./dist/

    build-environment:
        name: Build Environment

        needs:
            - prepare-tools
            - gen-installer

        runs-on: ${{ vars.RUNNER_IMAGE }}

        strategy:
            matrix:
                variant: ["gcc", "clang"]
            fail-fast: false

        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  ref: ${{ github.head_ref || github.ref_name }}
                  sparse-checkout-cone-mode: false
                  sparse-checkout: |
                      /*
                      !/dist/*

            - name: Configure
              run: |
                  ls ./src/sub-installer/library/ | sed -e s/^//g -e s/\.sh$//g |
                    while read -r lib_id; do
                      echo "AC_NO_BUILD_${lib_id//-/_}=true" >>"${GITHUB_ENV}"
                    done

            - name: Download Installers
              uses: actions/download-artifact@v4
              with:
                  name: dist-${{ matrix.variant }}-installers
                  path: ./dist/

            - name: Load Cached Tools
              uses: actions/cache/restore@v4
              with:
                  path: /opt/ac_tools/
                  key: ${{ needs.prepare-tools.outputs.cache-primary-key }}
                  fail-on-cache-miss: true

            - name: Apply Tools
              run: sudo cp -rf /opt/ac_tools/** /usr/

            - name: Load CCache
              if: ${{ github.event.inputs.test-mode != 'strict' }}
              uses: hendrikmuhs/ccache-action@v1.2
              with:
                  key: ${{ matrix.variant }}-compiler

            - name: Install
              env:
                  AC_RUN_TEST: ${{ github.event.inputs.test-mode == 'strict' }}
                  AC_NO_GENERATE_CACHES: true
              run: |
                  set -eu

                  chmod +x -R ./dist/
                  ./dist/${{ matrix.variant }}/install.sh

            - name: Upload
              uses: actions/upload-artifact@v4
              with:
                  name: compiler-${{ matrix.variant }}
                  path: /opt/atcoder/
                  compression-level: 0

    install-library:
        name: Install Libraries

        needs:
            - prepare-tools
            - gen-installer
            - config-matrix

        runs-on: ${{ vars.RUNNER_IMAGE }}

        strategy:
            matrix:
                target: ${{ fromJson(needs.config-matrix.outputs.libraries) }}
                variant: ["gcc", "clang"]
                exclude:
                    - target: libtorch
                      variant: clang
                    - target: light-gbm
                      variant: clang
            fail-fast: false

        steps:
            - name: Configure
              run: |
                  set -eu

                  TARGET='${{ matrix.target }}'

                  LIBRARIES='${{ needs.config-matrix.outputs.libraries }}'
                  EXCLUDED_LIBRARIES='${{ needs.config-matrix.outputs.excluded-libraries }}'

                  echo "${LIBRARIES}" | jq -c -r '.[]' |
                    while read -r lib_id; do
                      if [ "${TARGET}" != "${lib_id}" ]; then
                        echo "AC_NO_BUILD_${lib_id//-/_}=true" >>"${GITHUB_ENV}"
                      fi
                    done

                  echo "${EXCLUDED_LIBRARIES}" | jq -c -r '.[]' |
                    while read -r lib_id; do
                        echo "AC_NO_BUILD_${lib_id//-/_}=true" >>"${GITHUB_ENV}"
                    done

            - name: Checkout
              uses: actions/checkout@v4
              with:
                  ref: ${{ github.head_ref || github.ref_name }}
                  sparse-checkout-cone-mode: false
                  sparse-checkout: |
                      /*
                      !/dist/*

            - name: Download Installers
              uses: actions/download-artifact@v4
              with:
                  name: dist-${{ matrix.variant }}-installers
                  path: ./dist/

            - name: Load Cached Tools
              uses: actions/cache/restore@v4
              with:
                  path: /opt/ac_tools/
                  key: ${{ needs.prepare-tools.outputs.cache-primary-key }}
                  fail-on-cache-miss: true

            - name: Apply Tools
              run: sudo cp -rf /opt/ac_tools/** /usr/

            - name: Load CCache
              if: ${{ github.event.inputs.test-mode != 'strict' }}
              uses: hendrikmuhs/ccache-action@v1.2
              with:
                  key: ${{ matrix.variant }}-${{ matrix.target }}

            - name: Install
              env:
                  AC_RUN_TEST: ${{ github.event.inputs.test-mode == 'strict' }}
                  AC_NO_BUILD_COMPILER: true
                  AC_NO_GENERATE_CACHES: true
              run: |
                  set -eu

                  if "${{ matrix.variant == 'gcc' }}"; then
                    sudo apt-get install -y gcc-14

                    sudo ln -sf "$(which gcc-14)" /usr/local/bin/gcc
                    sudo ln -sf "$(which g++-14)" /usr/local/bin/g++
                  else
                    sudo apt-get install -y clang-19 libc++-19-dev lld

                    sudo ln -sf "$(which clang-19)" /usr/local/bin/clang
                    sudo ln -sf "$(which clang++-19)" /usr/local/bin/clang++
                  fi

                  chmod +x -R ./dist/
                  ./dist/${{ matrix.variant }}/install.sh

            - name: Collect Pkgconfig Files
              run: |
                  set -eu

                  mkdir -p ./config/libs/
                  find /opt/atcoder/ -name '**.pc' -type f -print0 |
                    xargs -0 -I {} sudo cp {} ./config/libs/

            - name: Upload Pkgconfig Files
              uses: actions/upload-artifact@v4
              with:
                  name: pkgconfig-${{ matrix.variant }}-${{ matrix.target }}
                  path: ./config/libs/
                  if-no-files-found: ignore

            - name: Clean Up
              run: |
                  set -eu

                  find /opt/atcoder/ -name cmake -or -name pkgconfig -or -name bin -or -name share -type d -print0 |
                    xargs -0 sudo rm -rf

            - name: Upload
              uses: actions/upload-artifact@v4
              with:
                  name: library-${{ matrix.variant }}-${{ matrix.target }}
                  path: /opt/atcoder/
                  compression-level: 0

    gen-compiler:
        name: Generate Compiler

        strategy:
            matrix:
                variant: ["gcc", "clang"]
            fail-fast: false

        needs:
            - prepare-tools
            - install-library

        runs-on: ${{ vars.RUNNER_IMAGE }}

        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  ref: ${{ github.head_ref || github.ref_name }}
                  sparse-checkout-cone-mode: false
                  sparse-checkout: |
                      /*
                      !/dist/*

            - name: Load Cached Tools
              uses: actions/cache/restore@v4
              with:
                  path: /opt/ac_tools/
                  key: ${{ needs.prepare-tools.outputs.cache-primary-key }}
                  fail-on-cache-miss: true

            - name: Apply Tools
              run: sudo cp -rf /opt/ac_tools/** /usr/

            - name: Download Pkgconfig Files
              uses: actions/download-artifact@v4
              with:
                  pattern: pkgconfig-${{ matrix.variant }}-*
                  path: ./pkgconfig/
                  merge-multiple: true

            - name: Expand
              run: |
                  set -eu

                  mkdir -p ./dist/${{ matrix.variant }}/
                  ./.github/workflows/internal/expanders/compiler.sh ${{ matrix.variant }}

            - name: Upload
              uses: actions/upload-artifact@v4
              with:
                  name: dist-${{ matrix.variant }}-compiler
                  path: ./dist/

    test:
        name: Test

        needs:
            - gen-compiler
            - build-environment

        runs-on: ${{ vars.RUNNER_IMAGE }}

        strategy:
            matrix:
                # id: [0, 1, 2, 3, 4, 5, 6, 7]
                variant: ["gcc", "clang"]
                type: ["individual", "merged"]
            fail-fast: false

        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  ref: ${{ github.head_ref || github.ref_name }}

            - name: Download Compiler
              uses: actions/download-artifact@v4
              with:
                  name: compiler-${{ matrix.variant }}
                  path: /opt/atcoder/

            - name: Download Libraries
              uses: actions/download-artifact@v4
              with:
                  pattern: library-${{ matrix.variant }}-*
                  path: /opt/atcoder/
                  merge-multiple: true

            - name: Download Compiler
              uses: actions/download-artifact@v4
              with:
                  pattern: dist-${{ matrix.variant }}-*
                  path: ./dist/
                  merge-multiple: true

            - name: Load CCache
              if: ${{ github.event.inputs.test-mode != 'strict' }}
              uses: hendrikmuhs/ccache-action@v1.2
              with:
                  key: ${{ matrix.variant }}-compiler

            - name: Configure
              env:
                  AC_INSTALL_DIR: /opt/atcoder/${{ matrix.variant }}
              run: |
                  ls ./src/sub-installer/library/ | sed -e s/^//g -e s/\.sh$//g |
                    while read -r lib_id; do
                      echo "AC_NO_BUILD_${lib_id//-/_}=true" >>"${GITHUB_ENV}"
                    done

                  if "${{ matrix.variant == 'gcc' }}"; then
                    sudo ln -sf "${AC_INSTALL_DIR}/bin/gcc" /usr/local/bin/gcc
                    sudo ln -sf "${AC_INSTALL_DIR}/bin/g++" /usr/local/bin/g++
                  else
                    sudo ln -sf "${AC_INSTALL_DIR}/bin/clang" /usr/local/bin/clang
                    sudo ln -sf "${AC_INSTALL_DIR}/bin/clang++" /usr/local/bin/clang++
                    sudo ln -sf "${AC_INSTALL_DIR}/bin/lld" /usr/local/bin/lld
                  fi

            - name: Test
              if: github.event.inputs.test-mode != 'none'
              env:
                  AC_NO_BUILD_COMPILER: true
              run: |
                  set -eu

                  chmod +x -R ./dist/
                  ./dist/${{ matrix.variant }}/install.sh

                  # TESTS=($(
                  #     find ./test/ -type f -iname *.test.cpp -printf '%P\n' | \
                  #     awk -v n=${{ strategy.job-total }}  \
                  #       -v i=${{ matrix.id }} \
                  #       '{ if((NR-1)%n == i){ print $0 } }'
                  # ))

                  if "${{ matrix.type == 'individual' }}"; then
                    ./.github/workflows/internal/test.sh "${{ matrix.variant }}" # "${TESTS[@]}"
                  else
                    ./.github/workflows/internal/merge-tests.sh

                    DIST_DIR="./dist/${{ matrix.variant }}"
                    mkdir -p "${DIST_DIR}"

                    mkdir -p ./test/tmp && cd ./test/tmp

                    cp -f "../../${DIST_DIR}/compile.sh" ./compile.sh
                    cp -f ../merged.cpp ./Main.cpp

                    if "${{ matrix.variant == 'gcc' }}"; then
                      cp -rf ../../gcm.cache ./gcm.cache
                    else
                      cp -rf ../../**.pcm ./
                    fi

                    ./compile.sh
                    ./a.out
                  fi

    gen-config:
        name: Generate Configuration File

        needs:
            - prepare-tools
            - gen-compiler

        strategy:
            matrix:
                variant: ["gcc", "clang"]
            fail-fast: false

        runs-on: ${{ vars.RUNNER_IMAGE }}

        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  ref: ${{ github.head_ref || github.ref_name }}
                  sparse-checkout-cone-mode: false
                  sparse-checkout: |
                      /*
                      !/dist/*

            - name: Load Cached Tools
              uses: actions/cache/restore@v4
              with:
                  path: /opt/ac_tools/
                  key: ${{ needs.prepare-tools.outputs.cache-primary-key }}
                  fail-on-cache-miss: true

            - name: Apply Tools
              run: sudo cp -rf /opt/ac_tools/** /usr/

            - name: Download Installer & Compiler
              uses: actions/download-artifact@v4
              with:
                  pattern: dist-${{ matrix.variant }}-*
                  path: ./dist/
                  merge-multiple: true

            - name: Expand Configuration File
              run: |
                  set -eu

                  ./.github/workflows/internal/expanders/config.sh ${{ matrix.variant }}

            - name: Lint
              run: ./.github/workflows/internal/lint.sh ${{ matrix.variant }}

            - name: Upload
              uses: actions/upload-artifact@v4
              with:
                  name: dist-${{ matrix.variant }}-config
                  path: ./dist/

    push:
        name: Push to Repository

        needs:
            - gen-config
            - test

        if: >
            !cancelled() &&
            github.ref_name == github.event.repository.default_branch &&
            needs.test.result == 'success'

        runs-on: ${{ vars.RUNNER_IMAGE }}

        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  ref: ${{ github.head_ref || github.ref_name }}
                  ssh-key: ${{ secrets.SSH_KEY }}
                  fetch-depth: 0

            - name: Remove Old files
              run: sudo rm -rf ./dist/

            - name: Download Installers
              uses: actions/download-artifact@v4
              with:
                  pattern: dist-*-config
                  path: ./dist/
                  merge-multiple: true

            - name: Change Permission
              run: chmod +x -R ./dist/

            - name: Commit & Push
              uses: stefanzweifel/git-auto-commit-action@v5
              with:
                  file_pattern: "./dist/**"
                  commit_user_name: Template Expander
                  commit_user_email: template-expander@example.com
                  commit_message: "[workflow] expand templates (${{ github.sha }})"
                  commit_options: "--no-verify"
